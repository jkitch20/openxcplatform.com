---
layout: developer
title: Library Setup - OpenXC
---
<div class="page-header">
    <h1>Android Library Installation</h1>
</div>

The OpenXC functionality is exposed via a Java library that includes some
Android services your application can use. The library is available on GitHub in
the [openxc-android][] repository and also in the central Maven repository.

There is a [screencast walkthrough](http://www.youtube.com/watch?v=4uelN6Km_CI)
of the complete installation and OpenXC app tutorial on YouTube.

<div class="page-header">
    <h2>Installation</h2>
</div>

You can choose to develop with OpenXC via [Eclipse](#eclipse) or the [command
line](#cli) with Maven. You also need to install the [Enabler](#enabler)
application to your device - it takes care of a lot of boilerplate, so your
app's code can be simpler.

<div class="page-header">
    <h3 id="eclipse"><a href="#eclipse">Using Eclipse</a></h3>
</div>

Follow Google's [excellent
directions](http://developer.android.com/sdk/index.html) to install the Android
Developer Tools (ADT), which includes the Android SDK, Eclipse and the Android
plugin for Eclipse. Make sure you also install the latest [Android platform
version](http://developer.android.com/sdk/installing/adding-packages.html) and
any additional platform versions that you wish to target. You may also need the
latest [Java
JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html).

If you find yourself stuck and you need extra help installing the Android tools
in Windows, check out this [detailed screenshot
walkthrough](/android/adt-install-windows.html).

<div class="alert alert-error">
If you are running 64-bit Ubuntu you will need to install the ia32-libs package.
Other 64-bit Linux distributions will need to use their package managers to
install the correct 32-bit libraries.
</div>

<div class="alert alert-error">
If you use an Internet proxy, you will need to configure the proxy settings in
the Android SDK manager (in the <code>Tools -> Options</code> menu).
</div>

Get the [openxc-android][] source code in one of two ways:

* *Recommended method:* The latest stable version of the OpenXC Android source
  code can always be found at the [Releases
  page](https://github.com/openxc/openxc-android/releases). Make sure to
  download both the source code as well as the OpenXC Enabler .apk. The
  Vehicle Dashboard app is also available, which can be helpful in testing your
  Vehicle Interface. Extract the files to the location where you'd like the
  library to sit on your local workstation.
* Alternatively, clone the [openxc-android][] repository using Git. If you don't
  already have Git installed, GitHub has a [good
  reference](https://help.github.com/articles/set-up-git) for all platforms.
  This method gets you the most up-to-date changes in the OpenXC library, but
  might not be as stable.

<a href="https://github.com/openxc/openxc-android">
<img src="/images/screenshots/github.png" />
</a>

After obtaining the `openxc-android` library, open Eclipse and go to `File ->
Import -> Android -> Existing Android Code Into Workspace`. Browse to and select
the `openxc-android` folder you downloaded - Eclipse should should detect 4
Android projects within the folder. Unless you will be working on the internals
of the OpenXC library itself, you can uncheck the `openxc-it` testing project.
Click `Finish` to add the projects.

Wait a few seconds for Eclipse to build the projects - there should be no errors
reported. You're ready to start working with OpenXC! If you still have errors,
check the [troubleshooting](/android/troubleshooting.html) section or [ask for
some help from the community](/overview/discuss.html).

<div class="page-header">
    <h3 id="cli"><a href="#cli">Maven</a></h3>
</div>

If you prefer to compile and deploy from the command line, you can use
[Maven](http://maven.apache.org/download.cgi). Using Maven is out of the scope
of this documentation, so this is only recommended if you already know how to
use Maven. The OpenXC repository has the required `pom.xml` files to use it has
a library.

The OpenXC library artifact is available in the central Maven repository, so you
just need to add this to your `dependencies` section:

{% highlight xml %}
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.openxcplatform</groupId>
            <artifactId>openxc</artifactId>
            <version>5.0.0</version>
            <type>apklib</type>
        </dependency>
        ...
    </dependencies>
    ...
</dependencyManagement>
{% endhighlight %}

You also need to add the
[android-maven-plugin](http://code.google.com/p/maven-android-plugin/) so that
the `apklib` type is supported:

{% highlight xml %}
<build>
    <pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                <artifactId>android-maven-plugin</artifactId>
                <version>3.7.0</version>
                <extensions>true</extensions>
            </plugin>
        </plugins>
        ...
    </pluginManagement>
    ...
</build>
{% endhighlight %}

<div class="page-header">
    <h2 id="enabler">Enabler</h2>
</div>

The best way to make the vehicle interface available to your app is to install
the OpenXC Enabler app - the [source][enabler-source] for this app is in the
[openxc-android][] repository.

This app starts the vehicle service at boot and makes sure it stays alive - this
way, your app doesn't have to worry about USB permissions or reacting to device
detachment/reattachment.

If you don't want to use the Enabler app, it's certainly possible to start the
service from your application directly. Look at the [source for the
enabler][enabler-source] to see exactly how to accomplish that.

<div class="alert alert-error">
<strong>Note:</strong> Even if you only plan to use previously recorded trace
files and don't need to connect to a physical vehicle interface, the Enabler app
still must be installed.
</div>

There are three ways to install the Enabler:

**APK**

The latest version of the Enabler is available as an [APK][] on the Android
Library Releases page, ready to install in Android. Download that file directly
on your Android device and open it to install, or use the command line:

{% highlight sh %}
$ adb uninstall openxc-enabler.apk
{% endhighlight %}

**Eclipse**

If you have the `OpenXcEnablerActivity` project imported in Eclipse, right click
on the project and select `Run As -> Android Application` with an Android device
attached to install the app.

**Maven**

If you're using Maven at the command line:

{% highlight sh %}
$ mvn clean install -pl openxc -am && mvn clean package android:deploy android:run -pl enabler
{% endhighlight %}

<div class="page-header">
<h2>Next Steps</h2>
</div>

Once you have the library set up, you can start writing your [first OpenXC
app](/android/tutorial.html). If you are having trouble, check out the
[troubleshooting](/android/troubleshooting.html) steps.

[APK]: https://github.com/openxc/openxc-android/releases
[openxc-android]: https://github.com/openxc/openxc-android
[enabler-source]: https://github.com/openxc/openxc-android/tree/master/enabler
